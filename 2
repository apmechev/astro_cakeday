[?1049h[22;0;0t[22;0;0t[?1h=[H[2J]11;?[?2004h[?25h[?25l(B[m[H[2Jnoop[K
[K
[96m# Rebase (B[0;1m[96ma023f4f(B[m[96m..(B[0;1m[96ma023f4f(B[m[96m onto (B[0;1m[96ma023f4f(B[m[96m (1 command)(B[m[K
[96m#(B[m[K
[96m# Commands:(B[m[K
[96m# p, pick <commit> = use commit(B[m[K
[96m# r, reword <commit> = use commit, but edit the commit message(B[m[K
[96m# e, edit <commit> = use commit, but stop for amending(B[m[K
[96m# s, squash <commit> = use commit, but meld into previous commit(B[m[K
[96m# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous(B[m[K
[96m#                    commit's log message, unless -C is used, in which case(B[m[K
[96m#                    keep only this commit's message; -c is same as -C but(B[m[K
[96m#                    opens the editor(B[m[K
[96m# x, exec <command> = run command (the rest of the line) using shell(B[m[K
[96m# b, break = stop here (continue rebase later with 'git rebase --continue')(B[m[K
[96m# d, drop <commit> = remove commit(B[m[K
[96m# l, label <label> = label current HEAD with a name(B[m[K
[96m# t, reset <label> = reset HEAD to a label(B[m[K
[96m# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>](B[m[K
[96m# .       create a merge commit using the original merge commit's(B[m[K
[96m# .       message (or the oneline, if no original merge commit was(B[m[K
[96m# .       specified); use -c <commit> to reword the commit message(B[m[K
(B[0;1;7m.git/rebase-merge/git-rebase-todo                             1,1            Top]112[2 q]112[2 q[H[?25h[?25l[?1004h[?25h